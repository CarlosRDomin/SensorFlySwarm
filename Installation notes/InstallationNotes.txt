 [] Install Qt5
	- Download the open-source version of Qt5 from http://www.qt.io/download/
	- Follow the steps provided (execute the .dmg file). Sample installation location: /Library/MyBuilds/Qt5/

 [] Install PyQt5:
	- Download source from https://riverbankcomputing.com/software/pyqt/download5 and unzip
	- Execute my script "sh install.sh" (changing the line "workon sensorflyswarm" if you're working on a different virtualenv, and the "python configure.py --qmake=[...]" line to point to the right installation of Qt5's qmake)
	- If build fails, copy the attached qgeolocation.h to "QtPositioning/qgeolocation.h"

 [] Install sip: [even though they don't tell you, sip is a requirement for PyQtX!!]
	- Download source from https://riverbankcomputing.com/software/sip/download and unzip
	- Execute my script "sh install.sh" (changing the line "workon sensorflyswarm" if you're working on a different virtualenv)

 [] Install opencv (additional help here: http://www.pyimagesearch.com/2015/06/15/install-opencv-3-0-and-python-2-7-on-osx/):
	- Open a terminal in the folder you want OpenCV to be downloaded to (eg. "cd /Library/MyBuilds/")
	- Execute "git clone https://github.com/Itseez/opencv"
	- Execute "git clone https://github.com/Itseez/opencv_contrib"
	- Execute "cd opencv; mkdir build; cd build"
	- Execute "sh CONFIGURE_preinstall.sh", changing "workon sensorflyswarm" (line 3) to the virtualenv you want opencv to be installed in, and setting QMAKE_CMAKE_LIB_PATH (line 4) to the "lib/cmake" folder of your Qt5 installation path. Note: As of Dec/10/2015, WITH_FFMPEG and modules world, contrib_world and ximgproc from opencv_contrib raise errors when compiling/making, so I disabled them on the script.
	- Execute "sudo make -j8 install". Note: There might be an error while making: "build/modules/python2/pyopencv_generated_types.h:21542:5: error: unknown type name 'vector_Rect2d'; did you mean 'vector_Rect'?", which is solved by replacing the file "modules/python/src2/cv2.cpp" with the version I provide
	- Execute "CONFIGURE_postinstall.sh", to repair the dynamic libraries' relative paths

 [] Install matplotlib:
	- Execute "workon [virtualenv]"
	- Simply execute "pip install matplotlib"

---------------------------------------------------------------------------------

	VERY IMPORTANT NOTE: If, when calling any opencv method that uses the GUI (e.g., imshow), you get an error saying
		"This application failed to start because it could not find or load the Qt platform plugin 'cocoa'.
		Available platform plugins are: cocoa, minimal, offscreen.
		Reinstalling the application may fix this problem.",
	the solution is to go to the folder "/Library/MyBuilds/Qt5/5.5/clang_64/plugins/platforms" and execute the command "install_name_tool -add_rpath /Library/MyBuilds/Qt5/5.5/clang_64/lib libqcocoa.dylib" (replace "/Library/MyBuilds/Qt5/5.5/clang_64/lib" by the folder that contains all the "QtXXX.framework", if you installed Qt5 somewhere else)

---------------------------------------------------------------------------------

2/26/2016:
	Might be MUUUUCH EASIER to install everything through Homebrew:
		- brew install qt qt5 matplotlib (perhaps do brew info qt qt5... first to see if you want to set any of the extra flags, eg: --with-python3)
		- If desired, brew install any other dependencies (eg python, python3, numpy, scipy, ffmpeg, etc.). If there are any missing that opencv requires they'll be automatically installed, so it shouldn't be an issue
		- Then just execute "brew install opencv3 --with-contrib --with-ffmpeg --with-gphoto2 --with-gstreamer --with-jasper --with-libdc1394 --with-opengl --with-openni2 --with-python3 --with-qt5 --with-tbb --with-vtk"

---------------------------------------------------------------------------------

3/9/2016:
	Wooohooo, found a method to extract frames from UVC cameras that's muuuuch better than OpenCV (allows you to set exposure time, contrast, brightness, white balance, etc.). Here are the steps (pretty much follow pupil-labs/pyuvc's readme):
		- Install pupil-labs/libuvc (watch out, this is not the same as brew info libuvc!! In fact, pupil-labs's version is a fork of the original [the Homebrew one] ktossell/libuvc repo):
			+ git clone https://github.com/pupil-labs/libuvc
			+ cd libuvc
			+ mkdir build
			+ cd build
			+ cmake ..
			+ make && sudo make install
		- Install libjpeg-turbo:
			+ brew install libjpeg-turbo
		- Install cython and numpy:
			+ pip install cython
			+ brew install numpy
		- Not sure, but I think I had to install pupil-labs/pyglui (you can try skipping this step and if you get an error, come back here :P):
			+ brew install glew
			+ git clone http://github.com/pupil-labs/pyglui --recursive
			+ cd pyglui
			+ sudo python setup.py install
		- Finally, build and install pupil-labs/pyuvc:
			+ git clone https://github.com/pupil-labs/pyuvc
			+ cd pyuvc
			+ Optional: Open file 'controls.pxi' and add the following function at the end of the file:
				def set_value(self, value):  # Equivalent to "value"'s setter, but this one throws an Exception if setting value failed (i.e., the user can know whether the setting was successful)
					self._uvc_set(value)
					self.refresh()
			+ python setup.py install

---------------------------------------------------------------------------------

		- OPTIONAL [Meh, opencv video doesn't work well with AVFoundation anyways, ignore this] (Alternative to last command from 2/26/2016's instructions): Execute "export EDITOR=nano; brew edit opencv3" (could also use a better editor like 'export EDITOR=/Applications/Atom.app/Contents/MacOS/Atom')
			+ In line 37 (between with-opengl and with-quicktime) add this line:
				option "with-avfoundation", "Use AVFoundation for Video I/O instead of QTKit"
			+ Replace line 123 (or the one that starts with 'args << "-DWITH_QUICKTIME="...) by these 2 lines:
				args << "-DWITH_AVFOUNDATION=" + arg_switch("avfoundation")
				args << "-DWITH_QUICKTIME=" + (build.with?("avfoundation") ? "OFF" : arg_switch("quicktime"))
		- Execute "brew install opencv" so it downloads the file /Library/Caches/Homebrew/opencv3-3.1.0.tar.gz. Stop the progress once this file has been downloaded (by pressing Ctrl+C).
		- Open file opencv-3.1.0/CMakeLists.txt and change the end of line 165 from "IF IOS )" to "IF IOS OR APPLE)"
		- Open file opencv-3.1.0/cmake/OpenCVFindLibsVideo.cmake and change the end of line 318 from "AND CMAKE_COMPILER_IS_CLANGCXX)" to "AND CMAKE_COMPILER_IS_CLANGCXX AND (NOT HAVE_AVFOUNDATION))"
		- Open file opencv-3.1.0/modules/videoio/CMakeLists.txt and change line 170 to 'list(APPEND VIDEOIO_LIBRARIES "-framework Accelerate" "-framework AVFoundation" "-framework CoreGraphics" "-framework CoreMedia" "-framework CoreVideo" "-framework QuartzCore" "-framework Foundation" "-framework CoreFoundation")'
		- Execute "cd /Library/Caches/Homebrew/; tar -cvzf opencv3-3.1.0.tar.gz opencv-3.1.0/*"
		- Execute "export EDITOR=nano; brew edit opencv3" and replace the expected sha256 of opencv3-3.1.0.tar.gz (line 8) by the output of "shasum -a 256 opencv3-3.1.0.tar.gz"
		- Finally execute "brew install -v opencv3 --with-contrib --with-ffmpeg --with-gphoto2 --with-gstreamer --with-jasper --with-libdc1394 --with-qt5 --with-avfoundation --with-tbb"